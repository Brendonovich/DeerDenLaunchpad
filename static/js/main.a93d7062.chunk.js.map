{"version":3,"sources":["store/MappingStore.ts","store/BaseStore.ts","classes/Launchpad.ts","utils/index.ts","store/LaunchpadStore.ts","store/MidiStore.ts","store/UIStore.ts","store/index.tsx","hooks/index.ts","components/Launchpad/Pad.tsx","components/Launchpad/CirclePad.tsx","components/Launchpad/index.tsx","components/PagePreview.tsx","components/Sections/Pages.tsx","components/Combobox.tsx","components/Sections/Connection.tsx","components/TextInput.tsx","components/TextSelect.tsx","components/PadOptions.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MidiTypes","BaseStore","rootStore","Launchpad","name","input","output","addListener","e","noteon","message","this","emit","note","number","EventEmitter","rgbToHsv","r","g","b","s","max","Math","min","h","v","d","lpColor","rg","portNeutralize","x","toUpperCase","split","join","portsMatch","LaunchpadStore","action","bound","launchpads","observable","lastScan","undefined","WebMidi","enable","listener","scan","then","lps","replace","initialized","currentTimestamp","Date","inputs","outputs","launchpad","push","lp","find","currentLaunchpad","data","mappings","performAction","MappingStore","newPage","currentPage","pad","mapping","midi","sendMidi","page","selectedPad","ui","computed","MidiBytes","NOTE_OFF","NOTE_ON","CONTROL_CHANGE","MidiStore","root","webmidi","map","out","send","type","channel","UIStore","store","StoreContext","createContext","useStore","useContext","getWindowDimensions","window","width","innerWidth","height","innerHeight","usePadState","index","useState","val","setVal","useEffect","autorun","color","opacity","playNote","rawVelocity","velocity","Pad","size","preview","useObserver","style","backgroundColor","borderRadius","boxShadow","onClick","cursor","CirclePad","display","alignItems","justifyContent","padSize","padProps","background","flexDirection","padding","flex","pointerEvents","Array","fill","_","key","row","ri","i","PagePreview","selected","fontSize","round","textAlign","margin","border","Pages","overflow","className","outline","createNewPage","Combobox","options","onChanged","value","onChange","target","selectedIndex","option","Connection","length","setCurrentLaunchpad","setOutput","marginBottom","lineHeight","marginLeft","TextInput","forwardRef","ref","password","props","paddingLeft","values","borderWidth","PadOptions","mappingStore","currentPadMapping","checked","TextSelect","toString","parseInt","Object","isNaN","n","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","leftWidth","rightWidth","setRightWidth","pageHeight","setPageHeight","lpWindowSize","setLpWindowSize","minSize","primary","resizerStyle","maxSize","pane2Style","Boolean","location","hostname","match","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a93d7062.chunk.js","sourcesContent":["import { BaseStore } from \"./BaseStore\";\nimport { observable, action, computed } from \"mobx\";\n\nexport enum MidiTypes {\n  NOTE_ON = \"Note On\",\n  NOTE_OFF = \"Note Off\",\n  CONTROL_CHANGE = \"Control Change\",\n}\n\nexport type Mapping = {\n  color?: [number, number];\n  midi?: {\n    note: number;\n    type: MidiTypes;\n    channel: number;\n  };\n  page?: number;\n};\n\nexport class MappingStore extends BaseStore {\n  @observable mappings: {\n    [padIndex: number]: Mapping;\n  }[] = [{}];\n\n  @observable currentPage: number = 0;\n\n  @action.bound\n  createNewPage() {\n    let newPage = this.mappings.push({}) - 1;\n    this.currentPage = newPage;\n  }\n\n  @computed\n  get currentPadMapping() {\n    let selectedPad = this.rootStore.ui.selectedPad;\n    if (selectedPad === undefined) return undefined;\n\n    let mapping = this.mappings[this.currentPage][selectedPad];\n    return mapping;\n  }\n\n  @action.bound\n  performAction(pad: number) {\n    let mapping: Mapping | undefined = this.mappings[this.currentPage]?.[pad];\n    if (!mapping) return;\n    if (\n      mapping?.midi !== undefined &&\n      this.rootStore.midi.output !== undefined\n    ) {\n      this.rootStore.midi.sendMidi(mapping.midi);\n    }\n    \n    if (mapping.page) this.currentPage = mapping.page;\n  }\n}\n","import { RootStore } from \".\";\n\nexport class BaseStore {\n  constructor(public rootStore: RootStore) {}\n}\n","import {\n  Input,\n  Output,\n  InputEventNoteon,\n  InputEventNoteoff,\n  InputEventControlchange,\n} from \"webmidi\";\nimport { EventEmitter } from \"events\";\n\nexport default class Launchpad extends EventEmitter {\n  name: string;\n  input: Input;\n  output: Output;\n\n  constructor(name: string, input: Input, output: Output) {\n    super();\n\n    this.name = name;\n    this.input = input;\n    this.output = output;\n\n    this.input.addListener(\"noteon\", \"all\", (e) => this.noteon(e));\n  }\n\n  noteon(message: InputEventNoteon) {\n    this.emit(\"midievent\", { note: message.note.number });\n  }\n}\n","export const hsvToHex = ([h, s, v]: number[], fullRange = false): string => {\n  let r: number,\n    g: number,\n    b: number,\n    i = Math.floor(h * 6),\n    f = h * 6 - i,\n    p = v * (1 - s),\n    q = v * (1 - f * s),\n    t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  r = Math.round(r! * (fullRange ? 255 : 63));\n  g = Math.round(g! * (fullRange ? 255 : 63));\n  b = Math.round(b! * (fullRange ? 255 : 63));\n\n  return `${r.toString(16).padStart(2, \"0\")}${g\n    .toString(16)\n    .padStart(2, \"0\")}${b.toString(16).padStart(2, \"0\")}`;\n};\n\nexport const fullTo18bit = (full: string) => {\n  let r = full.slice(0, 2),\n    g = full.slice(2, 4),\n    b = full.slice(4, 6);\n\n  let newR = Math.floor(parseInt(r, 16) / 4),\n    newG = Math.floor(parseInt(g, 16) / 4),\n    newB = Math.floor(parseInt(b, 16) / 4);\n\n  return `${newR.toString(16).padStart(2, \"0\")}${newG\n    .toString(16)\n    .padStart(2, \"0\")}${newB.toString(16).padStart(2, \"0\")}`;\n};\n\nexport const squashFullHex = (full: string) => {\n  full = fullTo18bit(full);\n\n  let r = full.slice(0, 2),\n    g = full.slice(2, 4),\n    b = full.slice(4, 6);\n\n  let newR = Math.round(parseInt(r, 16) * 4),\n    newG = Math.round(parseInt(g, 16) * 4),\n    newB = Math.round(parseInt(b, 16) * 4);\n\n  return `${newR.toString(16).padStart(2, \"0\")}${newG\n    .toString(16)\n    .padStart(2, \"0\")}${newB.toString(16).padStart(2, \"0\")}`;\n};\n\nexport const rgbToHsv = ([r, g, b]: number[]) => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h = 0,\n    s,\n    v = max;\n\n  var d = max - min;\n  s = max === 0 ? 0 : d / max;\n\n  if (max === min) h = 0;\n  // achromatic\n  else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h! /= 6;\n  }\n\n  return [h!, s, v];\n};\n\nexport const hexToRgb = (hex: string) => [\n  parseInt(hex.slice(0, 2), 16),\n  parseInt(hex.slice(2, 4), 16),\n  parseInt(hex.slice(4, 6), 16),\n];\n\nexport const lpColor = (rg: [number, number]) =>\n  `rgb(${(240 * rg[0]) / 3}, ${(240 * rg[1]) / 3}, 0)`;\n\nexport const flattenObject = (options: any, recursion = 0) => {\n  let flattened: any = {};\n  Object.entries(options).forEach(([name, value]) => {\n    let children: any;\n    if (value !== false) {\n      children = flattenObject(value, recursion + 1);\n    }\n    flattened = { ...flattened, ...children };\n  });\n  return flattened;\n};\n\nexport const portNeutralize = (x: string) =>\n  x.toUpperCase().split(\"IN\").join(\"\").split(\"OUT\").join(\"\");\nexport const portsMatch = (input: string, output: string) =>\n  portNeutralize(input) === portNeutralize(output);\n","import { observable, action, IObservableArray } from \"mobx\";\nimport WebMidi from \"webmidi\";\n\nimport { BaseStore } from \"./BaseStore\";\nimport Launchpad from \"../classes/Launchpad\";\nimport { RootStore } from \".\";\nimport { portsMatch, portNeutralize } from \"../utils\";\n\nexport class LaunchpadStore extends BaseStore {\n  readonly launchpads: IObservableArray<Launchpad> = observable([]);\n  @observable initialized = false;\n  @observable currentLaunchpad?: Launchpad;\n\n  private lastScan?: Date = undefined;\n\n  constructor(rootStore: RootStore) {\n    super(rootStore);\n    WebMidi.enable((e) => {\n      if (e) return;\n      let listener = () =>\n        this.scan().then((lps) => {\n          if (lps !== undefined) this.launchpads.replace(lps);\n        });\n      listener();\n\n      WebMidi.addListener(\"connected\", listener);\n      WebMidi.addListener(\"disconnected\", listener);\n\n      this.initialized = true;\n    }, true);\n  }\n\n  @action.bound\n  async scan() {\n    const launchpads: Launchpad[] = [];\n\n    let currentTimestamp = new Date();\n\n    if (this.lastScan === undefined || this.lastScan < currentTimestamp)\n      this.lastScan = currentTimestamp;\n\n    for (let input of WebMidi.inputs) {\n      for (let output of WebMidi.outputs) {\n        if (portsMatch(input.name, output.name)) {\n          if (this.lastScan > currentTimestamp) return;\n\n          const launchpad = new Launchpad(input.name, input, output);\n\n          launchpads.push(launchpad);\n        }\n      }\n    }\n    if (this.lastScan > currentTimestamp) return;\n    return launchpads;\n  }\n\n  @action.bound\n  setCurrentLaunchpad(launchpad: string) {\n    let lp = this.launchpads.find((lp) => lp.name === launchpad);\n    if (lp === undefined) return;\n    this.currentLaunchpad = lp;\n    this.currentLaunchpad.addListener(\"midievent\", (data) => {\n      this.rootStore.mappings.performAction(data.note);\n    });\n  }\n}\n","import { BaseStore } from \"./BaseStore\";\nimport webmidi, { Output } from \"webmidi\";\nimport { observable, action } from \"mobx\";\nimport { RootStore } from \".\";\nimport { MidiTypes } from \"./MappingStore\";\n\ninterface MidiMessage {\n  channel: number;\n  type: MidiTypes;\n  note: number;\n}\n\nconst MidiBytes = {\n  [MidiTypes.NOTE_OFF]: 0x8,\n  [MidiTypes.NOTE_ON]: 0x9,\n  [MidiTypes.CONTROL_CHANGE]: 0xa,\n};\n\nexport class MidiStore extends BaseStore {\n  @observable output?: Output;\n  @observable outputs: string[] = [];\n\n  constructor(root: RootStore) {\n    super(root);\n\n    webmidi.enable((e) => {\n      if (e) return;\n\n      let listener = () => {\n        this.outputs = webmidi.outputs.map((out) => out.name);\n      };\n\n      webmidi.addListener(\"connected\", listener);\n      webmidi.addListener(\"disconnected\", listener);\n\n      listener();\n    });\n  }\n\n  @action.bound\n  setOutput(output: string) {\n    this.output = webmidi.outputs.find((out) => out.name === output);\n  }\n\n  @action.bound\n  sendMidi(message: MidiMessage) {\n    this.output?.send(MidiBytes[message.type] * 0x10 + message.channel - 1, [\n      message.note,\n      127,\n    ]);\n  }\n}\n","import { BaseStore } from \"./BaseStore\";\nimport { observable } from \"mobx\";\n\nexport class UIStore extends BaseStore {\n  @observable selectedPad?: number;\n}\n","import React, { createContext, useContext } from \"react\";\nimport { LaunchpadStore } from \"./LaunchpadStore\";\nimport { MidiStore } from \"./MidiStore\";\nimport { MappingStore } from \"./MappingStore\";\nimport { UIStore } from \"./UIStore\";\n\nexport class RootStore {\n  launchpads = new LaunchpadStore(this);\n  midi = new MidiStore(this);\n  mappings = new MappingStore(this);\n  ui = new UIStore(this)\n}\n\nexport const store = new RootStore();\n\nexport const StoreContext = createContext(store);\n\nexport const useStore = () => useContext(StoreContext);\n","import { useState, useEffect } from \"react\";\nimport { useStore } from \"../store\";\nimport { lpColor, rgbToHsv } from \"../utils\";\nimport { Mapping } from \"../store/MappingStore\";\nimport { autorun } from \"mobx\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport const useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    const handleResize = () => setWindowDimensions(getWindowDimensions());\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n\nexport const usePadState = (page: number, index: number) => {\n  const store = useStore();\n\n  const [val, setVal] = useState<any>({});\n\n  useEffect(() => {\n    autorun(() => {\n      let mapping: Mapping | undefined = store.mappings.mappings[page]?.[index];\n      if (mapping === undefined) return;\n      \n      setVal({\n        color: lpColor(mapping?.color || [0, 0]),\n        opacity: mapping?.color\n          ? rgbToHsv([\n              (240 * mapping?.color![0]) / 3,\n              (240 * mapping?.color![1]) / 3,\n              0,\n            ])[2]\n          : 0,\n      });\n\n      if (mapping.color)\n        store.launchpads.currentLaunchpad?.output.playNote(index, \"all\", {\n          rawVelocity: true,\n          velocity: 0x10 * mapping.color[1] + mapping.color[0] + 0x0c,\n        });\n      else store.launchpads.currentLaunchpad?.output.playNote(index, \"all\", {\n        rawVelocity: true,\n        velocity: 0x0C\n      })\n    });\n    //eslint-disable-next-line\n  }, []);\n\n  return val;\n};\n","import React from \"react\";\nimport { PadProps } from \".\";\nimport { useStore } from \"../../store\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { usePadState } from \"../../hooks\";\n\nconst Pad = ({ size, index, preview, page }: PadProps) => {\n  const store = useStore();\n  const { color, opacity } = usePadState(page, index);\n\n  return useObserver(() => (\n    <div\n      style={{\n        width: size,\n        height: size,\n        backgroundColor: \"#8B8B8B\",\n        borderRadius: \"4%\",\n        boxShadow:\n          index === store.ui.selectedPad && !preview\n            ? `0 0 0 ${size * 0.07}px #FFF`\n            : \"\",\n      }}\n      onClick={() => {\n        if (!preview) store.ui.selectedPad = index;\n      }}\n    >\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          cursor: \"pointer\",\n          backgroundColor: color,\n          opacity,\n        }}\n      />\n    </div>\n  ));\n};\n\nexport default Pad;\n","import React from \"react\";\nimport { PadProps } from \".\";\nimport { useStore } from \"../../store\";\nimport { usePadState } from \"../../hooks\";\nimport { useObserver } from \"mobx-react-lite\";\n\nconst CirclePad = ({ size, index, preview, page }: PadProps) => {\n  const store = useStore();\n  const { color, opacity } = usePadState(page, index);\n  \n  return useObserver(() => (\n    <div\n      style={{\n        width: size,\n        height: size,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: \"#8B8B8B\",\n          borderRadius: \"50%\",\n          width: size * 0.75,\n          height: size * 0.75,\n          boxShadow:\n            index === store.ui.selectedPad && !preview\n              ? `0 0 0 ${size * 0.07}px #FFF`\n              : \"\",\n        }}\n        onClick={() => {\n          if (!preview) store.ui.selectedPad = index;\n        }}\n      >\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            borderRadius: \"50%\",\n            backgroundColor: color,\n            opacity,\n            cursor: \"pointer\",\n          }}\n        />\n      </div>\n    </div>\n  ));\n};\n\nexport default CirclePad;\n","import React from \"react\";\nimport Pad from \"./Pad\";\nimport CirclePad from \"./CirclePad\";\n\ninterface Props {\n  size: number;\n  preview?: boolean;\n  page: number;\n}\n\nexport interface PadProps {\n  size: number;\n  index: number;\n  preview?: boolean;\n  page: number;\n}\n\nconst Launchpad = ({ size, preview, page }: Props) => {\n  const padSize = size * (4 / 46);\n  let padProps = { page, preview };\n  return (\n    <div\n      style={{\n        width: size,\n        height: size,\n        background: \"#181818\",\n        borderRadius: \"2%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"1%\",\n      }}\n    >\n      <div\n        style={{\n          flex: 4,\n          display: \"flex\",\n          flexDirection: \"row\",\n          pointerEvents: \"none\",\n        }}\n      >\n        <div\n          style={{\n            flex: 41,\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-around\",\n            alignItems: \"flex-end\",\n          }}\n        >\n          {new Array(8).fill(\"\", 0, 8).map((_, index) => (\n            <CirclePad\n              size={padSize}\n              key={index * -1}\n              index={-1 * index}\n              {...padProps}\n            />\n          ))}\n        </div>\n        <div style={{ flex: 4 }}></div>\n      </div>\n      <div style={{ flex: 41, display: \"flex\", flexDirection: \"row\" }}>\n        <div\n          style={{\n            flex: 41,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          {new Array(8)\n            .fill(new Array(8).fill(\"\", 0, 8), 0, 8)\n            .map((row, ri) => (\n              <div\n                key={ri}\n                style={{\n                  width: \"100%\",\n                  height: padSize,\n                  display: \"flex\",\n                  justifyContent: \"space-around\",\n                }}\n              >\n                {row.map((_: any, i: number) => (\n                  <Pad\n                    size={padSize}\n                    key={ri * 0x10 + i}\n                    index={ri * 0x10 + i}\n                    preview={preview}\n                    page={page}\n                  />\n                ))}\n              </div>\n            ))}\n        </div>\n        <div\n          style={{\n            flex: 4,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          {new Array(8).fill(\"\", 0, 8).map((_, index) => (\n            <CirclePad size={padSize} key={8 + index * 0x10} index={8 + index * 0x10} {...padProps} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Launchpad;\n","import React, { useState, useEffect } from \"react\";\nimport AutosizingInput from \"react-input-autosize\";\n\nimport Launchpad from \"./Launchpad\";\nimport { useStore } from \"../store\";\n\ninterface Props {\n  page: number;\n  name: number;\n  selected: boolean;\n  height: number;\n}\n\nconst PagePreview = ({ page, selected, height }: Props) => {\n  const store = useStore();\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        padding: \"0 30px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"space-evenly\",\n        backgroundColor: selected ? \"#484848\" : undefined,\n        cursor: \"pointer\",\n      }}\n      onClick={() => (store.mappings.currentPage = page)}\n    >\n      <Launchpad size={height * 0.7} preview={true} page={page} />\n      <div\n        style={{\n          fontSize: Math.round(height * 0.06),\n          color: \"white\",\n          textAlign: \"center\",\n          margin: 0,\n          padding: \"1% 8%\",\n          backgroundColor: \"#585858\",\n          borderRadius: height,\n          border: \"1px solid white\",\n        }}\n      >\n        {page}\n      </div>\n    </div>\n  );\n};\n\nexport default PagePreview;\n","import React from \"react\";\n\nimport PagePreview from \"../PagePreview\";\nimport { useStore } from \"../../store\";\nimport { useObserver } from \"mobx-react-lite\";\n\nconst Pages = ({ height }: any) => {\n  const store = useStore();\n\n  return useObserver(() => (\n      <div\n        style={{\n          display: \"flex\",\n          overflow: \"auto\",\n          flex: 1,\n        }}\n        className=\"center-scroll\"\n      >\n        {store.mappings.mappings.map((_, index) => (\n          <PagePreview\n            key={index}\n            name={index}\n            page={index}\n            height={height}\n            selected={store.mappings.currentPage === index}\n          />\n        ))}\n        <button\n          style={{\n            border: \"none\",\n            backgroundColor: \"#00000000\",\n            outline: \"none\",\n            fontSize: 40,\n            color: \"#888888\",\n          }}\n          onClick={() => store.mappings.createNewPage()}\n        >\n          +\n        </button>\n      </div>\n  ));\n};\n\nexport default Pages;\n","import React from \"react\";\n\ninterface Props {\n  options: string[];\n  onChanged(value: string, selectedIndex: number): void;\n  style: any;\n  value?: string;\n  [key: string]: any;\n}\n\nconst Combobox = ({ options, onChanged, style, value, ...props }: Props) => {\n  return (\n    <select\n      style={{\n        border: \"1px solid black\",\n        backgroundColor: \"#181818\",\n        color: \"white\",\n        fontSize: 20,\n        height: 40,\n        ...style,\n      }}\n      onChange={(e) => onChanged(e.target.value, e.target.selectedIndex)}\n      value={value}\n    >\n      {options.map((option: string) => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default Combobox;\n","import React, { useEffect } from \"react\";\nimport { useObserver } from \"mobx-react-lite\";\n\nimport Combobox from \"../Combobox\";\n\nimport { useStore } from \"../../store\";\nimport { autorun } from \"mobx\";\n\nconst Connection = () => {\n  const store = useStore();\n\n  useEffect(() => {\n    autorun(() => {\n      if (\n        store.launchpads.currentLaunchpad === undefined &&\n        store.launchpads.launchpads.length > 0\n      )\n        store.launchpads.setCurrentLaunchpad(\n          store.launchpads.launchpads[0].name\n        );\n      if (store.midi.output === undefined && store.midi.outputs.length > 0)\n        store.midi.setOutput(store.midi.outputs[0]);\n    });\n    //eslint-disable-next-line\n  }, []);\n\n  return useObserver(() => (\n    <div\n      style={{\n        flex: 1,\n        padding: 15,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          marginBottom: 10,\n        }}\n      >\n        <p\n          style={{\n            color: \"white\",\n            fontSize: 20,\n            lineHeight: 1,\n            margin: \"auto 0\",\n          }}\n        >\n          Launchpad\n        </p>\n        <div style={{ marginLeft: 10, flex: 1 }}>\n          <Combobox\n            onChanged={(lp) => store.launchpads.setCurrentLaunchpad(lp)}\n            options={store.launchpads.launchpads.map((lp) => lp.name)}\n            style={{ width: \"100%\" }}\n            value={store.launchpads.currentLaunchpad?.name}\n          />\n        </div>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          marginBottom: 10,\n        }}\n      >\n        <p\n          style={{\n            color: \"white\",\n            fontSize: 20,\n            lineHeight: 1,\n            margin: \"auto 0\",\n          }}\n        >\n          Passthrough\n        </p>\n        <div style={{ marginLeft: 10, flex: 1 }}>\n          <Combobox\n            onChanged={(out) => store.midi.setOutput(out)}\n            options={store.midi.outputs}\n            style={{ width: \"100%\" }}\n            value={store.midi.output?.name}\n          />\n        </div>\n      </div>\n    </div>\n  ));\n};\n\nexport default Connection;\n","import React, { forwardRef } from \"react\";\n\nconst TextInput = forwardRef(\n  ({ style, password, ...props }: any, ref) => {\n    return (\n        <input\n          type={password ? \"password\" : \"text\"}\n          ref={ref}\n          style={{\n            backgroundColor: \"#232323\",\n            border: \"1px solid black\",\n            height: 35,\n            width: \"100%\",\n            color: \"white\",\n            fontSize: 20,\n            paddingLeft: 2,\n            ...style,\n          }}\n          {...props}\n        />\n    );\n  }\n);\n\nexport default TextInput;\n","import React from \"react\";\n\ninterface Props {\n  value: string;\n  options: string[];\n  onChange(e: React.ChangeEvent<HTMLSelectElement>): void;\n  style?: React.CSSProperties;\n  values?: string[];\n}\n\nexport default ({ value, options, onChange, style, values }: Props) => (\n  <select\n    value={value}\n    onChange={onChange}\n    style={{ ...style, borderWidth: 0, fontSize: 20, width: \"auto\" }}\n  >\n    {options.map((option: any, index: number) => (\n      <option key={option} value={values ? values[index] : option}>\n        {option}\n      </option>\n    ))}\n  </select>\n);\n","import React from \"react\";\nimport { useStore } from \"../store\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { MidiTypes } from \"../store/MappingStore\";\nimport TextInput from \"./TextInput\";\nimport TextSelect from \"./TextSelect\";\nimport { rgbToHsv, lpColor } from \"../utils\";\n\nconst PadOptions = ({ pad }: { pad: number }) => {\n  const mappingStore = useStore().mappings;\n\n  return useObserver(() => (\n    <div>\n      <p\n        style={{\n          fontSize: 24,\n          width: \"100%\",\n          textAlign: \"center\",\n          cursor: \"pointer\",\n          color: \"white\",\n        }}\n        onClick={() => {\n          if (mappingStore.currentPadMapping === undefined)\n            mappingStore.mappings[mappingStore.currentPage][pad] = {};\n          else delete mappingStore.mappings[mappingStore.currentPage][pad];\n        }}\n      >\n        {mappingStore.currentPadMapping === undefined\n          ? \"Add mapping\"\n          : \"Remove mapping\"}\n      </p>\n      {mappingStore.currentPadMapping !== undefined && (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            color: \"white\",\n            padding: \"0 20px\",\n          }}\n        >\n          <span style={{ fontSize: 24 }}>\n            Midi{\" \"}\n            <input\n              type=\"checkbox\"\n              checked={mappingStore.currentPadMapping.midi !== undefined}\n              onChange={(e) =>\n                (mappingStore.currentPadMapping!.midi = e.target.checked\n                  ? {\n                      type: MidiTypes.NOTE_ON,\n                      channel: 1,\n                      note: 0,\n                    }\n                  : undefined)\n              }\n            />\n          </span>\n          {mappingStore.currentPadMapping.midi !== undefined && (\n            <>\n              <span style={{ fontSize: 20 }}>\n                Channel\n                <TextSelect\n                  style={{ marginLeft: 10 }}\n                  value={mappingStore.currentPadMapping.midi.channel.toString()}\n                  options={new Array(16)\n                    .fill(\"\", 0, 16)\n                    .map((_, index) => (index + 1).toString())}\n                  onChange={(e) =>\n                    (mappingStore.currentPadMapping!.midi!.channel = parseInt(\n                      e.target.value\n                    ))\n                  }\n                />\n              </span>\n              <span style={{ fontSize: 20 }}>\n                Type\n                <TextSelect\n                  style={{ marginLeft: 10 }}\n                  value={mappingStore.currentPadMapping.midi.type}\n                  options={Object.values(MidiTypes)}\n                  onChange={(e) =>\n                    (mappingStore.currentPadMapping!.midi!.type = e.target\n                      .value as MidiTypes)\n                  }\n                />\n              </span>\n              <span style={{ fontSize: 20 }}>\n                Note{\" \"}\n                <TextInput\n                  style={{ width: 40, marginLeft: 10 }}\n                  value={mappingStore.currentPadMapping.midi.note}\n                  onChange={(e: any) => {\n                    let note = parseInt(e.target.value);\n                    if (e.target.value === \"\") note = 0;\n                    if (!isNaN(note) && note < 128 && note > -1)\n                      mappingStore.currentPadMapping!.midi!.note = note;\n                  }}\n                />\n              </span>\n            </>\n          )}\n          <span style={{ fontSize: 24 }}>\n            Color{\" \"}\n            <input\n              type=\"checkbox\"\n              checked={mappingStore.currentPadMapping.color !== undefined}\n              onChange={(e) =>\n                (mappingStore.currentPadMapping!.color = e.target.checked\n                  ? [3, 3]\n                  : undefined)\n              }\n            />\n          </span>\n          {mappingStore.currentPadMapping.color !== undefined && (\n            <div\n              style={{\n                width: \"100%\",\n                display: \"flex\",\n                flexDirection: \"row\",\n                height: 80,\n              }}\n            >\n              <div\n                style={{\n                  flex: 1,\n                  height: \"100%\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <div\n                  style={{\n                    flex: 1,\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <span\n                    style={{ fontSize: 20, width: 55, textAlign: \"center\" }}\n                  >\n                    Red\n                  </span>\n\n                  {[0, 1, 2, 3].map((n) => (\n                    <div\n                      style={{\n                        width: 25,\n                        height: 25,\n                        backgroundColor: \"rgb(139, 139, 139)\",\n                        outline:\n                          mappingStore.currentPadMapping?.color![0] === n\n                            ? \"2px solid white\"\n                            : undefined,\n                        cursor: \"pointer\",\n                      }}\n                      onClick={() =>\n                        (mappingStore.currentPadMapping!.color![0] = n)\n                      }\n                    >\n                      <div\n                        style={{\n                          width: 25,\n                          height: 25,\n                          backgroundColor: \"red\",\n                          opacity: n / 3,\n                        }}\n                      />\n                    </div>\n                  ))}\n                </div>\n                <div\n                  style={{\n                    flex: 1,\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <span\n                    style={{ fontSize: 20, width: 55, textAlign: \"center\" }}\n                  >\n                    Green\n                  </span>\n                  {[0, 1, 2, 3].map((n) => (\n                    <div\n                      style={{\n                        width: 25,\n                        height: 25,\n                        backgroundColor: \"rgb(139, 139, 139)\",\n                        outline:\n                          mappingStore.currentPadMapping?.color![1] === n\n                            ? \"2px solid white\"\n                            : undefined,\n                        cursor: \"pointer\",\n                      }}\n                      onClick={() =>\n                        (mappingStore.currentPadMapping!.color![1] = n)\n                      }\n                    >\n                      <div\n                        style={{\n                          width: 25,\n                          height: 25,\n                          backgroundColor: \"green\",\n                          opacity: n / 3,\n                        }}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div\n                style={{\n                  width: 50,\n                  marginLeft: 10,\n                  height: \"100%\",\n                  backgroundColor: \"rgb(139, 139, 139)\",\n                }}\n              >\n                <div\n                  style={{\n                    width: 50,\n                    height: \"100%\",\n                    backgroundColor: lpColor(\n                      mappingStore.currentPadMapping.color!\n                    ),\n                    opacity: rgbToHsv([\n                      (240 * mappingStore.currentPadMapping.color![0]) / 3,\n                      (240 * mappingStore.currentPadMapping.color![1]) / 3,\n                      0,\n                    ])[2],\n                  }}\n                ></div>\n              </div>\n            </div>\n          )}\n          <span style={{ fontSize: 24 }}>\n            Page{\" \"}\n            <input\n              type=\"checkbox\"\n              checked={mappingStore.currentPadMapping.page !== undefined}\n              onChange={(e) =>\n                (mappingStore.currentPadMapping!.page = e.target.checked\n                  ? 0\n                  : undefined)\n              }\n            />\n          </span>{\" \"}\n          {mappingStore.currentPadMapping.page !== undefined && (\n            <span style={{ fontSize: 20 }}>\n              Switch to{\" \"}\n              <TextSelect\n                style={{ paddingLeft: 10 }}\n                value={mappingStore.currentPadMapping.page.toString()}\n                options={mappingStore.mappings.map((_, index) =>\n                  index.toString()\n                )}\n                onChange={(e) =>\n                  (mappingStore.currentPadMapping!.page = parseInt(\n                    e.target.value\n                  ))\n                }\n              />\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  ));\n};\n\nexport default PadOptions;\n","import React, { useState, useEffect } from \"react\";\nimport SplitPane from \"react-split-pane\";\n\nimport \"./App.css\";\n\nimport Launchpad from \"./components/Launchpad\";\nimport Pages from \"./components/Sections/Pages\";\n\nimport { useWindowDimensions } from \"./hooks\";\nimport Connection from \"./components/Sections/Connection\";\nimport { useStore } from \"./store\";\nimport { useObserver } from \"mobx-react-lite\";\nimport PadOptions from \"./components/PadOptions\";\n\nexport default () => {\n  const store = useStore();\n  const { width, height } = useWindowDimensions();\n\n  const [leftWidth, setLeftWidth] = useState(400);\n  const [rightWidth, setRightWidth] = useState(400);\n  const [pageHeight, setPageHeight] = useState(300);\n\n  const [lpWindowSize, setLpWindowSize] = useState({\n    width: width - 800 - 20,\n    height: height - 300 - 20,\n  });\n\n  useEffect(() => {\n    setLpWindowSize({\n      width: width - leftWidth - rightWidth - 20,\n      height: height - pageHeight - 20,\n    });\n  }, [leftWidth, rightWidth, pageHeight, width, height]);\n\n  return useObserver(() => (\n    <SplitPane\n      split=\"vertical\"\n      minSize={350}\n      className=\"primary\"\n      primary=\"second\"\n      resizerStyle={{ backgroundColor: \"black\" }}\n      onChange={(e) => setRightWidth(e)}\n      style={{ backgroundColor: \"#2B2B2B\" }}\n    >\n      <SplitPane\n        split=\"horizontal\"\n        minSize={300}\n        maxSize={height / 2}\n        className=\"primary\"\n        primary=\"second\"\n        resizerStyle={{ backgroundColor: \"black\" }}\n        onChange={(e) => setPageHeight(e)}\n        pane2Style={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Launchpad\n            size={Math.min(lpWindowSize.width, lpWindowSize.height)}\n            page={store.mappings.currentPage}\n          />\n        </div>\n        <Pages height={pageHeight} />\n      </SplitPane>\n      <>\n        <Connection />\n        {store.ui.selectedPad !== undefined && (\n          <PadOptions pad={store.ui.selectedPad} />\n        )}\n      </>\n    </SplitPane>\n  ));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StoreContext, store } from \"./store\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <StoreContext.Provider value={store}>\n      <App />\n  </StoreContext.Provider>,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}